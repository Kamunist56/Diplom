unit cPac;

interface

{ класс для работы с таблицый Пациента(Pac) }
uses fDM, cSmallTables, cAdress, cPlace, cSector, cPolis;

type
  TPacient = class
  public
    id: integer;
    surname, name_, patronymic, pol: string;
    groupInval: integer;
    date_birth: Tdate;
    Soc_status: string;
    Polis: TPolis;
    Adress: TAdress;
    Polikl,Work : TPlace;
    Sector: TSector;
    Soc: TSmallTables;

    procedure GetAtr(Find_id: integer);
    procedure ChangeAtrib;
    procedure New;
    procedure Del(Pacient: TPacient);
    constructor Create;
    destructor Destroy;
  end;

implementation

{ Pacient }

procedure TPacient.ChangeAtrib;
begin
  with dm.QPacUpd do
  begin
    close;
    Parameters.ParamValues['id'] := id;
    Parameters.ParamValues['name'] := name_;
    Parameters.ParamValues['surname'] := surname;
    Parameters.ParamValues['patronymic'] := patronymic;
    Parameters.ParamValues['pol'] := pol;
    Parameters.ParamValues['date_birth'] := date_birth;
    Parameters.ParamValues['soc_status'] := Soc.id;
    Parameters.ParamValues['polis'] := Polis.id;
    Parameters.ParamValues['adress'] := Adress.id;
    Parameters.ParamValues['stat_work'] := Work.id;
    Parameters.ParamValues['sector'] := Sector.id;
    Parameters.ParamValues['polikl'] := Polikl.id;
    Parameters.ParamValues['GroupInval'] := groupInval;
    ExecSQL;
  end;
end;

{ TPacient }
constructor TPacient.Create;
begin
  Polikl := TPlace.Create('Polikl');
  Sector := TSector.Create;
  Soc := TSmallTables.Create('SocStatus');
  Polis := TPolis.Create;
  Adress := TAdress.Create;;
  Work := TPlace.Create('StatWork');
end;

procedure TPacient.Del(Pacient: TPacient);
begin
  with dm.Qpacdel do
  begin
    close;
    Parameters.ParamValues['id'] := Pacient.id;
    ExecSQL;
    Adress.Del(Adress.id);
  end;
end;

destructor TPacient.Destroy;
begin
  Soc.Destroy;
  Polis.Destroy;
  Adress.Destroy;
  Work.Destroy;
  Sector.Destroy;
  Polikl.Destroy;
end;

procedure TPacient.GetAtr(Find_id: integer);
begin
  dm.QPacGet.close;
  dm.QPacGet.Parameters.ParamValues['id'] := id;
  dm.QPacGet.open;

  name_ := dm.QPacGetname.AsString;
  surname := dm.QPacGetsurname.AsString;
  patronymic := dm.QPacGetpatronymic.AsString;
  pol := dm.QPacGetpol.AsString;
  date_birth := dm.QPacGetdate_birth.AsDateTime;
  groupInval := dm.QPacGetGroupInval.ASinteger;

  Soc := TSmallTables.Create('SocStatus');
  Soc.GetAtr(dm.QPacGetsoc_status.ASinteger);

  Polis := TPolis.Create;
  Polis.Get(dm.QPacGetpolis.ASinteger);

  Adress := TAdress.Create;
  Adress.GetAtr(dm.QPacGetadress.ASinteger);

  Work := TPlace.Create('StatWork');
  Work.Get(dm.QPacGetstat_worrk.ASinteger);

  Sector := TSector.Create;
  Sector.Get(dm.QPacGetsector.ASinteger);

  Polikl := TPlace.Create('Polikl');
  Polikl.Get(dm.QPacGetpolikl.ASinteger);

  dm.QPacGet.close;
end;

procedure TPacient.New;
begin
  with dm.QPacIns do
  begin
    close;
    Parameters.ParamValues['name'] := name_;
    Parameters.ParamValues['surname'] := surname;
    Parameters.ParamValues['patronymic'] := patronymic;
    Parameters.ParamValues['pol'] := pol;
    Parameters.ParamValues['date_birth'] := date_birth;
    Parameters.ParamValues['soc_status'] := Soc.id;
    Parameters.ParamValues['polis'] := Polis.id;
    Parameters.ParamValues['adress'] := Adress.id;
    Parameters.ParamValues['stat_work'] := Work.id;
    Parameters.ParamValues['sector'] := Sector.id;
    Parameters.ParamValues['polikl'] := Polikl.id;
    Parameters.ParamValues['GroupInval'] := groupInval;
    ExecSQL;
  end;
end;

end.
